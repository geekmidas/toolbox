services:
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - "cache:/data"
  cache:
    ports:
      - "8079:80"
    image: hiett/serverless-redis-http:latest
    environment:
      SRH_MODE: env
      SRH_TOKEN: example_token
      SRH_CONNECTION_STRING: "redis://redis:6379" # Using `redis` hostname since they're in the same Docker network.
  postgres:
    restart: unless-stopped
    image: postgres:17
    volumes:
      - "dbdata:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=geekmidas
      - POSTGRES_PASSWORD=geekmidas
      - POSTGRES_DB=geekmidas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U geekmidas -d geekmidas"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
  rabbitmq:
    image: rabbitmq:4.1.1-management
    ports:
      - "5672:5672" # Map the default AMQP port
      - "15672:15672" # Map the management UI port
    environment:
      RABBITMQ_DEFAULT_USER: geekmidas # Set the default username
      RABBITMQ_DEFAULT_PASS: geekmidas # Set the default password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/ # Persist RabbitMQ data
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"] # Basic health check
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always # Ensure the container restarts automatically
  minio:
    image: minio/minio:latest
    entrypoint: sh
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio-data:/data"
    environment:
      - MINIO_ROOT_USER=geekmidas
      - MINIO_ROOT_PASSWORD=geekmidas
      - MINIO_DEFAULT_BUCKETS=geekmidas
      - MINIO_ACCESS_KEY=geekmidas
      - MINIO_SECRET_KEY=geekmidas
    command: -c 'mkdir -p /data/geekmidas && /usr/bin/docker-entrypoint.sh server --console-address ":9001" /data'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566" # LocalStack Gateway
    environment:
      - SERVICES=sqs,sns
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "localstack-data:/var/lib/localstack"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  dbdata:
  minio-data:
  cache:
  rabbitmq_data:
  localstack-data:
