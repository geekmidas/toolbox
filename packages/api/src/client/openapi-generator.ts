import { exec } from 'child_process';
import { promisify } from 'util';
import { readFile, writeFile } from 'fs/promises';

const execAsync = promisify(exec);

export interface GenerateTypesOptions {
  input: string; // OpenAPI spec URL or file path
  output?: string; // Output file path
  version?: 3 | 2; // OpenAPI version
}

export async function generateOpenAPITypes(options: GenerateTypesOptions) {
  const { input, output = './openapi-types.d.ts', version = 3 } = options;
  
  try {
    // Use openapi-typescript to generate types
    const command = `npx openapi-typescript ${input} -o ${output} --version ${version}`;
    
    const { stderr } = await execAsync(command);
    
    if (stderr) {
      throw new Error(stderr);
    }
    
    // Post-process the generated file to add our custom types
    await postProcessGeneratedTypes(output);
    
    return { success: true, output };
  } catch (error) {
    throw error;
  }
}

async function postProcessGeneratedTypes(filePath: string) {
  try {
    // Read the generated file
    let content = await readFile(filePath, 'utf-8');
    
    // Add a header comment
    const header = `/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Generated on: ${new Date().toISOString()}
 */

`;
    
    // Prepend the header if it doesn't exist
    if (!content.includes('auto-generated')) {
      content = header + content;
    }
    
    // Write back the modified content
    await writeFile(filePath, content, 'utf-8');
  } catch (error) {
    throw error;
  }
}

// CLI support
if (import.meta.url === `file://${process.argv[1]}`) {
  const args = process.argv.slice(2);
  const input = args[0];
  const output = args[1];
  
  if (!input) {
    process.exit(1);
  }
  
  generateOpenAPITypes({ input, output })
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
}