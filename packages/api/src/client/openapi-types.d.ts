/**
 * This file should be auto-generated by openapi-typescript.
 * Run: npx openapi-typescript <your-openapi-spec> -o ./openapi-types.d.ts
 *
 * This is a placeholder file showing the expected structure.
 */

export interface paths {
  '/job/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      operationId: 'getJob';
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              role: string;
              overview: string;
              qualifications: string;
              hourlyRate: {
                max: number;
                min: number;
              };
              dateNeeded: {
                from: string;
                to: string;
              };
              shiftHours: {
                from: string;
                to: string;
              };
              /** Format: uuid */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
              /** Format: uuid */
              businessId: string;
              /** Format: uuid */
              creatorId: string;
              /** @enum {string} */
              status: 'Draft' | 'Active' | 'Closed' | 'Filled';
            };
          };
        };
      };
    };
    put: {
      operationId: 'updateJob';
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            role?: string;
            overview?: string;
            qualifications?: string;
            hourlyRate?: {
              max: number;
              min: number;
            };
            dateNeeded?: {
              from: string;
              to: string;
            };
            shiftHours?: {
              from: string;
              to: string;
            };
            /** @enum {string} */
            status?: 'Draft' | 'Active' | 'Closed' | 'Filled';
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              role: string;
              overview: string;
              qualifications: string;
              hourlyRate: {
                max: number;
                min: number;
              };
              dateNeeded: {
                from: string;
                to: string;
              };
              shiftHours: {
                from: string;
                to: string;
              };
              /** Format: uuid */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
              /** Format: uuid */
              businessId: string;
              /** Format: uuid */
              creatorId: string;
              /** @enum {string} */
              status: 'Draft' | 'Active' | 'Closed' | 'Filled';
            };
          };
        };
      };
    };
    post?: never;
    delete: {
      operationId: 'deleteJob';
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** Format: uuid */
              id: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users': {
    get: {
      operationId: 'listUsers';
      parameters: {
        query: {
          page?: number;
          limit?: number;
          sort?: 'asc' | 'desc';
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              users: Array<{
                id: string;
                name: string;
                email: string;
              }>;
            };
          };
        };
      };
    };
    post: {
      operationId: 'createUser';
      requestBody: {
        content: {
          'application/json': {
            name: string;
            email: string;
          };
        };
      };
      responses: {
        201: {
          content: {
            'application/json': {
              id: string;
              name: string;
              email: string;
            };
          };
        };
      };
    };
  };
  '/users/{id}': {
    parameters: {
      path: {
        id: string;
      };
    };
    get: {
      operationId: 'getUser';
      responses: {
        200: {
          content: {
            'application/json': {
              id: string;
              name: string;
              email: string;
            };
          };
        };
      };
    };
    put: {
      operationId: 'updateUser';
      requestBody: {
        content: {
          'application/json': {
            name?: string;
            email?: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              id: string;
              name: string;
              email: string;
            };
          };
        };
      };
    };
    delete: {
      operationId: 'deleteUser';
      responses: {
        204: {
          content: never;
        };
      };
    };
  };
  '/posts': {
    get: {
      operationId: 'listPosts';
      parameters: {
        query: {
          page?: number;
          limit?: number;
          sort?: 'asc' | 'desc';
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              posts: Array<{
                id: string;
                title: string;
                content: string;
                authorId: string;
                createdAt: string;
              }>;
              pagination: {
                page: number;
                limit: number;
                total: number;
              };
              sort: 'asc' | 'desc';
            };
          };
        };
      };
    };
  };
  '/protected': {
    get: {
      operationId: 'getProtected';
      responses: {
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        401: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
      };
    };
  };
  '/error': {
    get: {
      operationId: 'getError';
      responses: {
        500: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
      };
    };
  };
  '/users/paginated': {
    get: {
      operationId: 'getUsersPaginated';
      parameters: {
        query: {
          page?: number;
          limit?: number;
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              users: Array<{
                id: string;
                name: string;
                email: string;
              }>;
              pagination: {
                page: number;
                limit: number;
                total: number;
                hasMore: boolean;
              };
            };
          };
        };
      };
    };
  };
  '/messages': {
    get: {
      operationId: 'getMessages';
      parameters: {
        query: {
          cursor?: string;
          limit?: number;
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              messages: Array<{
                id: string;
                text: string;
                timestamp: string;
              }>;
              nextCursor: string | null;
            };
          };
        };
      };
    };
  };
  '/echo': {
    get: {
      operationId: 'echo';
      parameters: {
        query: {
          [key: string]: string | number | boolean;
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              queryParams: Record<string, string>;
              data: Array<{
                id: string;
                value: string;
              }>;
              pagination: {
                page: number;
                limit: number;
                total: number;
                hasMore: boolean;
              };
            };
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    User: {
      id: string;
      name: string;
      email: string;
    };
    Post: {
      id: string;
      title: string;
      content: string;
      authorId: string;
      createdAt: string;
    };
  };
}
